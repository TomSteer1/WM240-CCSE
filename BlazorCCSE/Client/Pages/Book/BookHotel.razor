@page "/bookHotel"
@page "/bookHotel/{id}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using BlazorCCSE.Shared
@using System.Text

@if (Id is null)
{
    NavigationManager.NavigateTo("/hotels");
} else
{
    <PageTitle>Book Hotel</PageTitle>
    <h1>Book a hotel</h1>
    if (hotel is null)
    {
        <p><em>Loading...</em></p>
    }else 
    {
       <h2>You are booking a room at @hotel!.name</h2>
       @if(message != null)
        {
            <h2>@message</h2>
        }
       <EditForm Model="booking" OnSubmit="CheckAvailability">
           <div>
               <label for="StartDate">Select Start Date</label>
                <InputDate id="StartDate" @bind-Value="booking!.startDate" @bind-Value:after="UpdateBooking"/>
           </div>
           <div>
           <label for="EndDate">Select End Date</label>
                <InputDate id="EndDate" @bind-Value="booking!.endDate" @bind-Value:after="UpdateBooking"/>
            </div>
            <div>
             <label for="RoomType">Select Room Type</label>
             <InputSelect id="RoomType" @bind-Value="booking!.roomType" @bind-Value:after="UpdateBooking">
                <option value="singleRoom">Single Room @hotel!.singlePrice</option>
                <option value="doubleRoom">Double Room @hotel!.doublePrice</option>
                <option value="familyRoom">Family Room @hotel!.familyPrice</option>
            </InputSelect>
            </div>
        <button type="submit" class="btn btn-primary">Check Availability</button>
       </EditForm>
        <h3>Nights Selected : @length</h3>
        <h3>Total Cost: @cost</h3>
        <h3>Deposit Due Today: @(booking.payment.amount)</h3>

        @if (bookingAvailable & aVchecked)
        {
            <h4>Please pay the deposit to book your stay</h4>
            <EditForm Model="booking.payment" OnSubmit="Book">
                <div>
                    <label for="CardNumber">Card Number</label>
                    <InputText id="CardNumber" @bind-Value="booking.payment!.cardNumber" />
                </div>
                <div>
                    <label for="CVV">CVV</label>
                    <InputText id="CVV" @bind-Value="booking.payment!.cvv" />
                </div>
                <div>
                    <label for="ExpiryMonth">Expiry Month</label>
                    <InputNumber id="ExpiryMonth" @bind-Value="booking.payment!.expiryMonth" />
                </div>
                <div>
                    <label for="ExpiryYear">Expiry Year</label>
                    <InputNumber id="ExpiryYear" @bind-Value="booking.payment!.expiryYear" />
                </div>
                <button type="submit" class="btn btn-primary">Book</button>
            </EditForm>
        }else
        {
            <div>
            @if (aVchecked)
            {
                <span>This booking is not available</span>
            }else
            {
                <span>Please check availability</span>
            }
            </div>
            <button type="submit" class="btn btn-primary" disabled>Book</button>
        }
    }
}

@code {
    [Parameter]
    public string? Id { get; set; }
    public Hotel? hotel { get; set; }
    public HotelBooking? booking { get; set; }

    public string? message { get; set; }
    private int length = 1;
    public decimal cost { get; set; }
    private bool bookingAvailable = false;
    private bool aVchecked = false;

    protected override async Task OnInitializedAsync()
    {
        booking = new HotelBooking
            {
                startDate = DateTime.Now.Date,
                endDate = DateTime.Now.Date.AddDays(1),
                roomType = RoomTypes.singleRoom
            };
        hotel = await Http.GetFromJsonAsync<Hotel>("api/Hotel/" + Id);
        if (hotel is null)
        {
            NavigationManager.NavigateTo("/Hotels");
        }else
        {
            cost = hotel.singlePrice;
            booking = new HotelBooking
                {
                    hotelID = hotel.id,
                    hotel = hotel,
                    startDate = DateTime.Now.Date,
                    endDate = DateTime.Now.Date.AddDays(1),
                    roomType = RoomTypes.singleRoom,
                    payment = new Payment
                    {
                        amount = cost * 0.2m
                    }
                };
        }
    }

    private async Task<bool> CheckAvailability()
    {
        message = "Checking availability";
        HttpResponseMessage resp = await Http.PostAsJsonAsync<HotelBooking>("api/booking/hotel/check", booking);
        if (resp.StatusCode != System.Net.HttpStatusCode.OK)
        {
            bookingAvailable = false;
        }
        else
        {
            bookingAvailable = true;
        }
        message = null;
        aVchecked = true;
        StateHasChanged();
        return bookingAvailable;
    }

    private void UpdateBooking()
    {
        length = (booking.endDate.Date - booking.startDate.Date).Days;
        if (length <= 0)
        {
            booking.endDate = booking.startDate.AddDays(1);
            message = "The end date must be after your start date";
            length = booking.endDate.Subtract(booking.startDate).Days;
        }
        cost = length * hotel.GetPrice(booking.roomType);
        booking.payment.amount = cost * 0.2m;
        aVchecked = false;
    }

    private async void Book()
    {
        if(!await CheckAvailability())
        {
            message = "This booking is not available";
            return;
        }
        if(!booking.payment.Validate())
        {
            Console.WriteLine("Invalid card details");
            message = "Please enter valid card details";
            return;
        }
        booking.payment.items = booking.payment.items.Append(new PaymentItem
        {
            name = hotel.name + " deposit",
            cost = booking.payment.amount
        });
        await JSRuntime.InvokeAsync<string>("saveFile", "receipt.txt", booking.payment.GetReceipt());

        message = "Your room is being booked";
        HttpResponseMessage resp = await Http.PostAsJsonAsync<HotelBooking>("api/booking/hotel/create", booking);
        HotelBooking respBook = await resp.Content.ReadFromJsonAsync<HotelBooking>();
        if (respBook == null)
        {
            Console.WriteLine("Setting error message");
            message = "An error occured";
        }else
        {
            message = "Your room has been booked";
            NavigationManager.NavigateTo("/bookings/hotel/" + respBook.id);
        }
        StateHasChanged();
    }
}

@page "/bookPackage"
@page "/bookPackage/{hotelId}/{tourId}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using BlazorCCSE.Shared
@using System.Text.Json

@if (hotelId is null || tourId is null)
{
    NavigationManager.NavigateTo("/hotels");
} else
{
    <PageTitle>Book Package</PageTitle>
    <h1>Book a Package</h1>
    if (hotel is null || tour is null)
    {
        <p><em>Loading...</em></p>
    }else 
    {
       <h2>You are booking a room at @hotel!.name and spaces on the tour @tour!.name</h2>
       @if(message != null)
        {
            <h2>@message</h2>
        }
       <EditForm Model="booking" OnSubmit="CheckAvailability">
           <div>
               <label for="StartDate">Select Start Date</label>
                <InputDate id="StartDate" @bind-Value="booking!.startDate" @bind-Value:after="UpdateBooking" />
           </div>
           <div>
           <label for="EndDate">End Date</label>
                <InputDate id="EndDate" @bind-Value="booking!.endDate" @bind-Value:after="UpdateBooking" disabled />
            </div>
            <div>
             <label for="RoomType">Select Room Type</label>
             <InputSelect id="RoomType" @bind-Value="booking.hotelBooking!.roomType" @bind-Value:after="UpdateBooking">
                <option value="singleRoom">Single Room @hotel!.singlePrice</option>
                <option value="doubleRoom">Double Room @hotel!.doublePrice</option>
                <option value="familyRoom">Family Room @hotel!.familyPrice</option>
            </InputSelect>
            </div>
           <div>
                <label for="People">Number of People</label>
                <InputNumber id="People" @bind-Value="booking.tourBooking!.people" @bind-Value:after="UpdateBooking"/>
            </div>
        <button type="submit" class="btn btn-primary">Check Availability</button>
       </EditForm>
        <h3>Hotel Cost: @booking.hotelBooking.totalCost</h3>
        <h3>Tour Cost: @booking.tourBooking.totalCost</h3>
        <h3>Sub total: @subTotal</h3>
        <h3>Discount : @(dicount * 100)%</h3>
        <h3>Total Cost: @total</h3>

        @if (bookingAvailable & aVchecked)
        {
            <h4>Please pay the deposit to book your package</h4>
            <EditForm Model="booking.payment" OnSubmit="Book">
                <div>
                    <label for="CardNumber">Card Number</label>
                    <InputText id="CardNumber" @bind-Value="booking.payment!.cardNumber" />
                </div>
                <div>
                    <label for="CVV">CVV</label>
                    <InputText id="CVV" @bind-Value="booking.payment!.cvv" />
                </div>
                <div>
                    <label for="ExpiryMonth">Expiry Month</label>
                    <InputNumber id="ExpiryMonth" @bind-Value="booking.payment!.expiryMonth" />
                </div>
                <div>
                    <label for="ExpiryYear">Expiry Year</label>
                    <InputNumber id="ExpiryYear" @bind-Value="booking.payment!.expiryYear" />
                </div>
                <button type="submit" class="btn btn-primary">Book</button>
            </EditForm>
        }else
        {
            <div>
            @if (aVchecked)
            {
                <span>This booking is not available</span>
            }else
            {
                <span>Please check availability</span>
            }
            </div>
            <button type="submit" class="btn btn-primary" disabled>Book</button>
        }
    }
}

@code {
    [Parameter]
    public string? hotelId { get; set; }
    [Parameter]
    public string? tourId { get; set; }
    public Hotel? hotel { get; set; }
    public Tour? tour { get; set;}
    public PackageBooking? booking { get; set; } = new PackageBooking();

    public string? message { get; set; }
    private int length = 1;
    public decimal subTotal { get; set; }
    public decimal total { get; set; }
    public decimal dicount { get; set; } = 0.1m;
    private bool bookingAvailable = false;
    private bool aVchecked = false;

    protected override async Task OnInitializedAsync()
    {
        booking = new PackageBooking
        {
            startDate = DateTime.Now,
            endDate = DateTime.Now.AddDays(1)
        };

        hotel = await Http.GetFromJsonAsync<Hotel>("api/Hotel/" + hotelId);
        tour = await Http.GetFromJsonAsync<Tour>("api/Tour/" + tourId);
        if (hotel is null || tour is null)
        {
            NavigationManager.NavigateTo("/Hotels");
        }else
        {
            booking.hotelBooking = new HotelBooking
                {
                    totalCost = hotel.GetPrice(RoomTypes.singleRoom) * tour.length,
                    roomType = RoomTypes.singleRoom,
                    hotelID = hotelId,
                    hotel = hotel
                };
            booking.tourBooking = new TourBooking
                {
                    totalCost = tour.cost,
                    tourID = tourId,
                    tour = tour
                };
            booking.endDate = booking.startDate.Date.AddDays(tour.length);
            subTotal = booking.tourBooking.totalCost + booking.hotelBooking.totalCost;
            total = subTotal * (1 - dicount);
            booking.payment = new Payment
                {
                    amount = total
                };
            booking.totalCost = total;
        }
    }

    private async Task<bool> CheckAvailability()
    {
        message = "Checking availability";
        booking.endDate = booking.startDate.Date.AddDays(tour.length);
        booking.hotelBooking.startDate = booking.startDate;
        booking.hotelBooking.endDate = booking.endDate;
        booking.tourBooking.startDate = booking.startDate;
        booking.tourBooking.endDate = booking.endDate;
        HttpResponseMessage hotelResp = await Http.PostAsJsonAsync<HotelBooking>("api/booking/hotel/check", booking.hotelBooking);
        HttpResponseMessage tourResp = await Http.PostAsJsonAsync<TourBooking>("api/booking/tour/check", booking.tourBooking);
        if (hotelResp.StatusCode != System.Net.HttpStatusCode.OK || tourResp.StatusCode != System.Net.HttpStatusCode.OK)
        {
            bookingAvailable = false;
            message = "This booking is not available";
        }
        else
        {

            message = "This booking is available";
            bookingAvailable = true;
        }
        aVchecked = true;
        StateHasChanged();
        return bookingAvailable;
    }

    private void UpdateBooking()
    {
        bookingAvailable = false;
        aVchecked = false;
        booking.endDate = booking.startDate.Date.AddDays(tour.length);
        booking.tourBooking.totalCost = tour.cost * booking.tourBooking.people;
        booking.hotelBooking.totalCost = tour.length * hotel.GetPrice(booking.hotelBooking.roomType);
        subTotal = booking.tourBooking.totalCost + booking.hotelBooking.totalCost;
        switch(booking.hotelBooking.roomType)
        {
            case RoomTypes.singleRoom:
                dicount = 0.10m;
                break;
            case RoomTypes.doubleRoom:
                dicount = 0.2m;
                break;
            case RoomTypes.familyRoom:
                dicount = 0.4m;
                break;
        }
        total = subTotal * (1 - dicount);
        booking.payment.amount = total * 0.2m;
        StateHasChanged();
    }

    private async void Book()
    {
        if (!await CheckAvailability())
        {
            message = "This booking is not available";
            return;
        }
        Console.WriteLine(JsonSerializer.Serialize(booking.payment));
        if (!booking.payment.Validate())
        {
            Console.WriteLine("Invalid card details");
            message = "Please enter valid card details";
            return;
        }
        booking.payment.items = booking.payment.items.Append(new PaymentItem
            {
                name = hotel.name + " deposit",
                cost = booking.hotelBooking.totalCost * 0.2m
            });
        booking.payment.items = booking.payment.items.Append(new PaymentItem
            {
                name = tour.name + " deposit",
                cost = booking.tourBooking.totalCost * 0.2m
            });
        booking.payment.items = booking.payment.items.Append(new PaymentItem
            {
                name = "Package discount",
                cost = total * 0.2m
            });
        await JSRuntime.InvokeAsync<string>("saveFile", "receipt.txt", booking.payment.GetReceipt());

        message = "Your package is being booked";
        Console.WriteLine("Hotel Name" + booking.hotelBooking.hotel.name);
        booking.hotelBookingID = booking.hotelBooking.id;
        booking.tourBookingID = booking.tourBooking.id;
        Console.WriteLine("ID" + booking.hotelBookingID);
        Http.DefaultRequestHeaders.TransferEncodingChunked = false;
        HttpResponseMessage resp = await Http.PostAsJsonAsync<PackageBooking>("api/booking/package/create", booking);
        PackageBooking respBook = await resp.Content.ReadFromJsonAsync<PackageBooking>();
        if (respBook is null)
        {
            message = "An error occured";
        }
        else
        {
            message = "Your package has been booked";
            NavigationManager.NavigateTo("/bookings/package/" + respBook.id);
        }
        StateHasChanged();
    }
}

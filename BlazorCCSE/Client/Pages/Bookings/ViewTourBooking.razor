@page "/bookings/tour/{id}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorCCSE.Shared
@attribute [Authorize]

<PageTitle>View Tour Booking</PageTitle>
<h1>Tour Booking</h1>

@if (tourBooking is null)
{
    <p><em>Loading...</em></p>  
}else   
{
    <h2>@tourBooking.tour.name</h2>
    <h3>Start Date: @tourBooking.startDate.ToShortDateString()</h3>
    <h3>End Date: @tourBooking.endDate.Date.ToShortDateString()</h3>
    <h3>People: @tourBooking.people</h3>
    <h3>Price: £@tourBooking.totalCost</h3>
    <h3>Deposit Paid: @tourBooking.depositPaid</h3>
    <h3>Total Paid: £@tourBooking.totalPaid</h3>
    <h3>Balance Remaining: £@(tourBooking.totalCost - tourBooking.totalPaid)</h3>
    @if (processing)
    {
        <p><em>Processing...</em></p>
    }

    else if (tourBooking.totalCost - tourBooking.totalPaid > 0)
    {
        <EditForm Model="payment">
            <div>
                <label for="CardNumber">Card Number</label>
                <InputText id="CardNumber" @bind-Value="payment!.cardNumber" />
            </div>
            <div>
                <label for="CVV">CVV</label>
                <InputText id="CVV" @bind-Value="payment!.cvv" />
            </div>
            <div>
                <label for="ExpiryMonth">Expiry Month</label>
                <InputNumber id="ExpiryMonth" @bind-Value="payment!.expiryMonth" />
            </div>
            <div>
                <label for="ExpiryYear">Expiry Year</label>
                <InputNumber id="ExpiryYear" @bind-Value="payment!.expiryYear" />
            </div>
            <div>
                <label for="Amount">Amount</label>
                <InputNumber id="Amount" @bind-Value="payment!.amount" />
            </div>
        </EditForm>
        <button type="submit" class="btn btn-primary" @onclick="() => Pay()">Pay</button>
     }

    @if (tourBooking.startDate.Date > DateTime.Now.AddDays(5).Date)
    {
        <button type="submit" class="btn btn-primary" @onclick="() => Cancel()">Cancel</button>
    }else
    {
        <p><em>You can only canel a booking 5 days or more before the start date</em></p>
    }
}


@code {
    [Parameter]
    public string? Id { get; set; }
    public TourBooking? tourBooking { get; set; }
    public Payment payment { get; set; } = new Payment();
    public bool processing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id is null)
        {
            NavigationManager.NavigateTo("/bookings");
        }
        else
        {
            tourBooking = await Http.GetFromJsonAsync<TourBooking>($"api/booking/tour/get/{Id}");
        }
    }

    public async void Pay()
    {
        processing = true;
        payment.bookingID = tourBooking!.id;
        await Http.PostAsJsonAsync<Payment>("api/booking/tour/pay", payment);
        tourBooking = await Http.GetFromJsonAsync<TourBooking>($"api/booking/tour/get/{Id}");
        payment.items = payment.items.Append(new PaymentItem
            {
                name = tourBooking.tour.name + " payment",
                cost = payment.amount
            });
        await JSRuntime.InvokeAsync<string>("saveFile", "receipt.txt", payment.GetReceipt());
        processing = false;
        payment = new Payment();
        StateHasChanged();
    }

    public async void Cancel()
    {
        await Http.PostAsJsonAsync<TourBooking>("api/booking/tour/cancel", tourBooking);
        NavigationManager.NavigateTo("/bookings");
    }
}

@page "/admin/Bookings"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize(Roles="admin")]
@using BlazorCCSE.Shared

<PageTitle>Bookings</PageTitle>
<h1>Bookings</h1>
<InputSelect @bind-Value="bookingType" @bind-Value:after="ChangeDisplay">
    <option value="Hotel">Hotel</option>
    <option value="Tour">Tour</option>
    <option value="Package">Package</option>
</InputSelect>
@switch (bookingType)
{
    case BookingType.Hotel:
        if(hotelBookings != null)
        {
            <table class="table">
            <thead>
                    <tr>
                        <th>Hotel</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Room Type</th>
                        <th>Customer</th>
                        <th>Price</th
                        <th>Deposit Paid</th>
                        <th>Total Paid</th>
                        <th>Balance Remaining</th>
                        <th>Open</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (HotelBooking b in hotelBookings)
                    {
                        <tr>
                            <td>@b.hotel.name</td>
                            <td>@b.startDate.ToShortDateString()</td>
                            <td>@b.endDate.Date.ToShortDateString()</td>
                            <td>@b.hotel.GetRoomType(b.roomType)</td>
                            <td>@b.forename @b.surname</td>
                            <td>£@b.totalCost</td>
                            <td>@b.depositPaid</td>
                            <td>£@b.totalPaid</td>
                            <td>£@(b.totalCost - b.totalPaid)</td>
                            <td><button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo($"/bookings/hotel/{b.id}")'>Open</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }else
        {
            <p><em>Loading...</em></p>
        }
        break;
    case BookingType.Tour:
        @if(tourBookings == null)
        {
            <p><em>Loading...</em></p>
        }else {
            <table class="table">
                 <thead>
                    <tr>
                        <th>Tour</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Customer</th>
                        <th>Price</th
                        <th>Deposit Paid</th>
                        <th>Total Paid</th>
                        <th>Balance Remaining</th>
                        <th>Open</th>
                    </tr>
                </thead>
                <tbody>                    
                    @foreach (TourBooking b in tourBookings)
                    {
                        <tr>
                            <td>@b.tour.name</td>
                            <td>@b.startDate.ToShortDateString()</td>
                            <td>@b.endDate.Date.ToShortDateString()</td>
                            <td>@b.forename @b.surname</td>
                            <td>£@b.totalCost</td>
                            <td>@b.depositPaid</td>
                            <td>£@b.totalPaid</td>
                            <td>£@(b.totalCost - b.totalPaid)</td>
                            <td><button @onclick='() => NavigationManager.NavigateTo($"/bookings/tour/{b.id}")'>Open</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        break;
    case BookingType.Package:
        @if (packageBookings == null)
        {
            <p><em>Loading...</em></p>
        }else
        {
            <table class="table">
                 <thead>
                    <tr>
                        <th>Hotel</th>
                        <th>Tour</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Room Type</th>
                        <th>Customer</th>
                        <th>Price</th
                        <th>Deposit Paid</th>
                        <th>Total Paid</th>
                        <th>Balance Remaining</th>
                        <th>Open</th>
                    </tr>
                </thead>
                <tbody>                    
                    @foreach (PackageBooking b in packageBookings)
                    {
                        <tr>
                            <td>@b.hotelBooking.hotel.name</td>
                            <td>@b.tourBooking.tour.name</td>
                            <td>@b.startDate.ToShortDateString()</td>
                            <td>@b.endDate.Date.ToShortDateString()</td>
                            <td>@b.hotelBooking.hotel.GetRoomType(b.hotelBooking.roomType)</td>
                            <td>@b.forename @b.surname</td>
                            <td>£@b.totalCost</td>
                            <td>@b.depositPaid</td>
                            <td>£@b.totalPaid</td>
                            <td>£@(b.totalCost - b.totalPaid)</td>
                            <td><button @onclick='() => NavigationManager.NavigateTo($"/bookings/Package/{b.id}")'>Open</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        break;
    default:
        <p>Please select a booking type</p>
    break;
}

@code {
    private enum BookingType
    {
        Hotel,
        Tour,
        Package
    }
    private BookingType bookingType = BookingType.Hotel;
    private HotelBooking[]? hotelBookings;
    private TourBooking[]? tourBookings;
    private PackageBooking[]? packageBookings;

    protected override async Task OnInitializedAsync()
    {
        hotelBookings = await Http.GetFromJsonAsync<HotelBooking[]>("api/booking/hotel/get");         
    }

    private async void ChangeDisplay()
    {
        switch (bookingType)
        {
            case BookingType.Hotel:
                hotelBookings = await Http.GetFromJsonAsync<HotelBooking[]>("api/booking/hotel/get");
                StateHasChanged();
                break;
            case BookingType.Tour:
                tourBookings = await Http.GetFromJsonAsync<TourBooking[]>("api/booking/tour/get");
                StateHasChanged();
                break;
            case BookingType.Package:
                packageBookings = await Http.GetFromJsonAsync<PackageBooking[]>("api/booking/package/get");
                StateHasChanged();
                break;
            default:
                break;
        }
    }
}
